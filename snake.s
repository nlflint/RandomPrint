.list
.code

POINTER_ALPHA = $06

;low res color defintions
LIGHT_GREY = $AA
ORANGE = $99
LIGHT_GREEN = $CC
DARK_GREEN = $44
PURPLE = $33
MAGENTA = $11
BLACK = $00

; play area screen geometry
FIRST_COLUMN = 0
LAST_COLUMN = 39
FIRST_ROW = 0
LAST_ROW = 19

; Soft switch defintions
SW_TEXT_OFF = $C050
SW_MIXED_ON = $C053
SW_80COL_OFF = $C00C
SW_PAGE2_OFF = $C054

;key codes
LEFT_KEY = $08
RIGHT_KEY = $15
UP_KEY = $0B

;4K ring buffer definition
BUFFER_FIRST_WORD = $2000
BUFFER_LAST_WORD = $2FFE

MAIN:
JSR ENABLE_LOW_RES_MIXED
JSR CLEAR_SCREEN
;JSR SHOW_TITLE
;JSR CLEAR_SCREEN
JSR DRAW_STATIC_GFX
JSR START_GAME_LOOP
JSR Done


ENABLE_LOW_RES_MIXED:
 STA SW_TEXT_OFF
 STA SW_MIXED_ON
 STA SW_80COL_OFF
 STA SW_PAGE2_OFF
 RTS

CLEARING_ROW: .byte $00
CLEAR_SCREEN:
 LDA #BLACK
 STA FILL_ROW_VALUE
 LDA #LAST_ROW
 STA CLEARING_ROW
CLEARING_LOOP:
 LDA CLEARING_ROW
 BMI CLEAR_SCREEN_DONE
 STA FILL_ROW_NUMBER
 JSR FILL_ROW
 DEC CLEARING_ROW
 JMP CLEARING_LOOP
CLEAR_SCREEN_DONE:

 ;clear last 4 lines of text
 LDA #$20
 ORA #%10000000
 STA FILL_ROW_VALUE
 
 LDA #20
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 LDA #21
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 LDA #22
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 LDA #23
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 RTS

DRAW_STATIC_GFX:
 JSR DRAW_GAME_BOX
 ;JSR DRAW_SCORE_LABEL
 RTS


DRAW_GAME_BOX:
 LDA #LIGHT_GREY
 STA FILL_ROW_VALUE

 LDA #FIRST_ROW
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 LDA #LAST_ROW
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 LDA #LIGHT_GREY
 STA FILL_COLUMN_VALUE
 LDA #FIRST_COLUMN
 STA FILL_COLUMN_NUMBER
 JSR FILL_COLUMN

 LDA #LAST_COLUMN
 STA FILL_COLUMN_NUMBER
 JSR FILL_COLUMN

 RTS


FILL_ROW_NUMBER: .byte $00
FILL_ROW_VALUE: .byte $00
FILL_ROW:
 LDX FILL_ROW_NUMBER
 LDA LO,X
 STA POINTER_ALPHA
 LDA HI,X
 STA POINTER_ALPHA+1
 LDA FILL_ROW_VALUE
 LDY #LAST_COLUMN
FILL_ROW_LOOP:
 STA (POINTER_ALPHA), Y
 DEY
 BPL FILL_ROW_LOOP
 RTS


FILL_COLUMN_NUMBER: .byte $00
FILL_COLUMN_VALUE: .byte $00
FILL_COLUMN:
 LDX #LAST_ROW
 LDY FILL_COLUMN_NUMBER
FILL_COLUMN_LOOP:
 LDA LO,X
 STA POINTER_ALPHA
 LDA HI,X
 STA POINTER_ALPHA+1
 LDA FILL_COLUMN_VALUE
 STA (POINTER_ALPHA), Y
 DEX
 BPL FILL_COLUMN_LOOP
 RTS

WRITE_PIXEL_ROW: .byte $00
WRITE_PIXEL_COLUMN: .byte $00
WRITE_PIXEL_COLOR: .byte $00
WRITE_PIXEL:
 LDX WRITE_PIXEL_ROW
 LDA LO,X
 STA POINTER_ALPHA
 LDA HI,X
 STA POINTER_ALPHA+1
 LDA WRITE_PIXEL_COLOR
 LDY WRITE_PIXEL_COLUMN
 STA (POINTER_ALPHA), Y
 RTS
 
TEXT_ADDR: .byte $00,$00
DESTINATION_ADDR: .byte $00,$00
COPY_TEXT_TO:
 RTS




;=========================
; Ring Buffer code
;==========================
BUFFER_HEAD: .word BUFFER_LAST_WORD
BUFFER_TAIL: .word BUFFER_FIRST_WORD

BUFFER_NEW_ROW: .byte $00
BUFFER_NEW_COLUMN: .byte $00
BUFFER_NEW:
 JSR INCREMENT_HEAD

 ;deference head pointer
 LDA BUFFER_HEAD
 STA POINTER_ALPHA
 LDA BUFFER_HEAD+1
 STA POINTER_ALPHA+1

 ;Add row to head
 LDA BUFFER_NEW_ROW
 LDY #0
 STA (POINTER_ALPHA),Y

 ;Add column to head
 LDA BUFFER_NEW_COLUMN
 INY
 STA (POINTER_ALPHA),Y
 
 
 RTS

INCREMENT_HEAD:
 LDA BUFFER_HEAD
 CLC
 ADC #2
 STA BUFFER_HEAD
 LDA BUFFER_HEAD+1
 ADC #0
 STA BUFFER_HEAD+1

 LDA #>BUFFER_LAST_WORD
 CMP BUFFER_HEAD+1
 BMI RESET_HEAD
 RTS
RESET_HEAD:
 LDA #0
 STA BUFFER_HEAD
 LDA #$20
 STA BUFFER_HEAD+1
 RTS

BUFFER_POP_TAIL:
 LDA BUFFER_TAIL
 CLC
 ADC #2
 STA BUFFER_TAIL
 LDA BUFFER_TAIL+1
 ADC #0
 STA BUFFER_TAIL+1

 LDA #>BUFFER_LAST_WORD
 CMP BUFFER_TAIL+1
 BMI RESET_TAIL
 RTS
RESET_TAIL:
  LDA #0
  STA BUFFER_TAIL
  LDA #$20
  STA BUFFER_TAIL+1
  RTS

GET_HEAD_ROW:
 LDA BUFFER_HEAD
 STA POINTER_ALPHA
 LDA BUFFER_HEAD+1
 STA POINTER_ALPHA+1
 LDY #0
 LDA (POINTER_ALPHA), Y
 RTS

GET_HEAD_COLUMN:
 LDA BUFFER_HEAD
 STA POINTER_ALPHA
 LDA BUFFER_HEAD+1
 STA POINTER_ALPHA+1
 LDY #1
 LDA (POINTER_ALPHA), Y
 RTS

GET_TAIL_ROW:
 LDA BUFFER_TAIL
 STA POINTER_ALPHA
 LDA BUFFER_TAIL+1
 STA POINTER_ALPHA+1
 LDY #0
 LDA (POINTER_ALPHA), Y
 RTS

GET_TAIL_COLUMN:
 LDA BUFFER_TAIL
 STA POINTER_ALPHA
 LDA BUFFER_TAIL+1
 STA POINTER_ALPHA+1
 LDY #1
 LDA (POINTER_ALPHA), Y
 RTS


DIRECTION: .byte $00
 
;====================
; Keyboard input
;=====================
START_GAME_LOOP:
 JSR CREATE_INITIAL_SNAKE
 JSR LISTEN_KEYBOARD
 RTS

CREATE_INITIAL_SNAKE:
 LDA #12
 STA BUFFER_NEW_ROW
 STA WRITE_PIXEL_ROW
 LDA #20
 STA BUFFER_NEW_COLUMN
 STA WRITE_PIXEL_COLUMN
 JSR BUFFER_NEW
 LDA #LIGHT_GREEN
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 LDA #11
 STA BUFFER_NEW_ROW
 STA WRITE_PIXEL_ROW
 LDA #20
 STA BUFFER_NEW_COLUMN
 STA WRITE_PIXEL_COLUMN
 JSR BUFFER_NEW
 LDA #LIGHT_GREEN
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 LDA #10
 STA BUFFER_NEW_ROW
 STA WRITE_PIXEL_ROW
 LDA #20
 STA BUFFER_NEW_COLUMN
 STA WRITE_PIXEL_COLUMN
 JSR BUFFER_NEW
 LDA #DARK_GREEN
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 RTS

LISTEN_KEYBOARD:
 ;Start read key loop
 LDA $C000
 BPL LISTEN_KEYBOARD
 STA $C010
 AND  #%01111111
 CMP  #LEFT_KEY
 BEQ  ON_LEFT
 CMP  #RIGHT_KEY
 BEQ  ON_RIGHT
 CMP  #UP_KEY
 BEQ  ON_UP
 JMP LISTEN_KEYBOARD
ON_LEFT:
 JSR HANDLE_LEFT
 JMP ON_UP
ON_RIGHT:
 JSR HANDLE_RIGHT
ON_UP:
 JSR HANDLE_UP
 JMP LISTEN_KEYBOARD

;Directions: 00 = up, 01 = right, 10 = down, 11 = left
HANDLE_LEFT:
 LDA DIRECTION
 SEC
 SBC #1
 AND #%00000011
 STA DIRECTION
 RTS

HANDLE_RIGHT:
 LDA DIRECTION
 CLC
 ADC #1
 AND #%00000011
 STA DIRECTION
 RTS

HANDLE_UP:
 ;erase head with body segment
 JSR GET_HEAD_ROW
 STA WRITE_PIXEL_ROW
 JSR GET_HEAD_COLUMN
 STA WRITE_PIXEL_COLUMN
 LDA #LIGHT_GREEN
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 ;add new head to buffer
 JSR GET_NEW_HEAD_ROW
 STA BUFFER_NEW_ROW
 JSR GET_NEW_HEAD_COLUMN
 STA BUFFER_NEW_COLUMN
 JSR BUFFER_NEW

 ;draw new head
 JSR GET_HEAD_ROW
 STA WRITE_PIXEL_ROW
 JSR GET_HEAD_COLUMN
 STA WRITE_PIXEL_COLUMN
 LDA #DARK_GREEN
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL
 
 ;erase tail
 JSR GET_TAIL_ROW
 STA WRITE_PIXEL_ROW
 JSR GET_TAIL_COLUMN
 STA WRITE_PIXEL_COLUMN
 LDA #BLACK
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 ;pop tail
 JSR BUFFER_POP_TAIL

 RTS

GET_NEW_HEAD_ROW:
 LDA DIRECTION
 CMP #0
 BEQ NEW_UP
 CMP #2
 BEQ NEW_DOWN
 JSR GET_HEAD_ROW
 RTS

NEW_UP:
 JSR GET_HEAD_ROW
 SEC
 SBC #1
 RTS

NEW_DOWN:
 JSR GET_HEAD_ROW
 CLC
 ADC #1
 RTS

GET_NEW_HEAD_COLUMN:
 LDA DIRECTION
 CMP #1
 BEQ NEW_RIGHT
 CMP #3
 BEQ NEW_LEFT
 JSR GET_HEAD_COLUMN
 RTS

NEW_RIGHT:
 JSR GET_HEAD_COLUMN
 CLC
 ADC #1
 RTS

NEW_LEFT:
 JSR GET_HEAD_COLUMN
 SEC
 SBC #1
 RTS




Done:
JMP Done

ScoreText: .byte "Score",0

; Low-res square row map
HI: .byte $04,$04,$05,$05,$06,$06,$07,$07
.byte $04,$04,$05,$05,$06,$06,$07,$07
.byte $04,$04,$05,$05,$06,$06,$07,$07

LO: .byte $00,$80,$00,$80,$00,$80,$00,$80
.byte $28,$A8,$28,$A8,$28,$A8,$28,$A8
.byte $50,$D0,$50,$D0,$50,$D0,$50,$D0